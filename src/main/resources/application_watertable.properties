#水平分表
server.port= 56091

spring.application.name= sharding-jdbc-demo

server.servlet.context-path= /sharding-jdbc-demo
spring.http.encoding.charset= utf-8
spring.http.encoding.enabled= true
spring.http.encoding.force= true

spring.main.allow-bean-definition-overriding= true
mybatis.configuration.map-underscore-to-camel-case= true

swagger.enable= true

logging.level.root= info
logging.level.org.springframework.web= info
logging.level.com.aby1993.shardingjdbc= debug
logging.level.druid.sql= debug

# sharding jdbc的分片规则
spring.shardingsphere.datasource.names= m1

spring.shardingsphere.datasource.m1.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name= com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url= jdbc:mysql://127.0.0.1:3306/shardingdemo1?useUnicode=true
spring.shardingsphere.datasource.m1.username= root
spring.shardingsphere.datasource.m1.password= 123456

#指定t_order表的数据分布情况 配置数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m1.t_order_$->{1..2}

#指定t_order表的主键生成策略为雪花算法
spring.shardingsphere.sharding.tables.t_order.key-generator.column= order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type= SNOWFLAKE

#指定t_order表的分片策略  分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column= order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression= t_order_$->{order_id % 2 +1}

#打开sql输出日志
spring.shardingsphere.props.sql.show= true